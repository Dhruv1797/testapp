name: "Android Workflow"

inputs:
  STORE_PASS:
    description: 'Store Password'
    required: false
    default: ''
  ALIAS:
    description: 'Certificate Alias'
    required: false
    default: ''
  KEY_PASS:
    description: 'Key Password'
    required: false
    default: ''
  VERSION_NAME:
    description: 'Version Name to be used for build'
    required: false
    default: '1.0.0'
  VERSION_CODE:
    description: 'Version Code to be used for build'
    required: true
    default: '1'
  pr_number:
    description: "Pull request number"
    required: false
    default: ''
  run_id:
    description: "GitHub Actions run ID"
    required: false
    default: ''
  repository:
    description: "Repository name"
    required: false
    default: ''
  github_token:
    description: "GitHub token for API access"
    required: false
    default: ''

runs:
  using: "composite"
  steps:
    - name: Set up Java
      uses: actions/setup-java@v4
      with:
        java-version: 17
        distribution: 'adopt'
        cache: 'gradle'

    - name: Set up Flutter
      uses: subosito/flutter-action@v2
      with:
        cache: true
        flutter-version-file: pubspec.yaml
      
    - name: Build Android APK/AAB
      shell: bash
      env:
        STORE_PASS: ${{ inputs.STORE_PASS }}
        ALIAS: ${{ inputs.ALIAS }}
        KEY_PASS: ${{ inputs.KEY_PASS }}
        VERSION_NAME: ${{inputs.VERSION_NAME}}
        VERSION_CODE: ${{inputs.VERSION_CODE}}
      run: |
        flutter build apk --debug --build-name $VERSION_NAME --build-number $VERSION_CODE
        flutter build apk --build-name $VERSION_NAME --build-number $VERSION_CODE
        flutter build appbundle --build-name $VERSION_NAME --build-number $VERSION_CODE
        
        if [ ! -f build/app/outputs/flutter-apk/app-debug.apk ]; then
          echo "Debug APK build failed"
          exit 1
        fi
        if [ ! -f build/app/outputs/flutter-apk/app-release.apk ]; then
          echo "Release APK build failed"
          exit 1
        fi
        if [ ! -f build/app/outputs/bundle/release/app-release.aab ]; then
          echo "App Bundle build failed"
          exit 1
        fi

    - name: Store APK files
      uses: actions/upload-artifact@v4
      id: upload-apk
      with:
        name: apk-files
        path: |
          build/app/outputs/flutter-apk/app-debug.apk
          build/app/outputs/flutter-apk/app-release.apk
        retention-days: 30

    - name: Get Artifact URLs
      if: inputs.pr_number != ''
      id: artifacts
      shell: bash
      run: |
        RUN_ID=${{ inputs.run_id }}
        REPO=${{ inputs.repository }}
        
        WORKFLOW_URL="https://github.com/$REPO/actions/runs/$RUN_ID"
        
        APK_URL="${{ steps.upload-apk.outputs.artifact-url }}"
        
        echo "WORKFLOW_URL=$WORKFLOW_URL" >> $GITHUB_OUTPUT
        echo "APK_URL=$APK_URL" >> $GITHUB_OUTPUT

    - name: Remove all previous comments
      if: inputs.pr_number != '' && inputs.github_token != ''
      uses: actions/github-script@v7
      with:
        github-token: ${{ inputs.github_token }}
        script: |
          const issue_number = parseInt('${{ inputs.pr_number }}');
          const owner = context.repo.owner;
          const repo = context.repo.repo;
          
          const comments = await github.rest.issues.listComments({
            owner,
            repo,
            issue_number
          });

          for (const comment of comments.data) {
            if (comment.user.login === 'github-actions[bot]') {
              await github.rest.issues.deleteComment({
                owner,
                repo,
                comment_id: comment.id
              });
            }
          }

    - name: Build success comment
      if: success() && inputs.pr_number != '' && inputs.github_token != ''
      uses: actions/github-script@v7
      with:
        github-token: ${{ inputs.github_token }}
        script: |
          const issue_number = parseInt('${{ inputs.pr_number }}');
          const owner = context.repo.owner;
          const repo = context.repo.repo;
          const apk_url = '${{ steps.artifacts.outputs.APK_URL }}';
          const workflow_url = '${{ steps.artifacts.outputs.WORKFLOW_URL }}';
          
          await github.rest.issues.createComment({
            owner,
            repo,
            issue_number,
            body: `Build successful. APKs to test: **[Download Android APK](${apk_url})** [View workflow run](${workflow_url})`
          });

    - name: Build failed comment
      if: failure() && inputs.pr_number != '' && inputs.github_token != ''
      uses: actions/github-script@v7
      with:
        github-token: ${{ inputs.github_token }}
        script: |
          const issue_number = parseInt('${{ inputs.pr_number }}');
          const owner = context.repo.owner;
          const repo = context.repo.repo;
          const workflow_url = '${{ steps.artifacts.outputs.WORKFLOW_URL }}';

          await github.rest.issues.createComment({
            owner,
            repo,
            issue_number,
            body: `Build workflow failed. Please check the [logs](${workflow_url}) for more information.`
          });